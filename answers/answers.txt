PART 2:

What are all the types of pokemon that a pokemon can have?
SELECT name FROM pokemon.types;
+----------+
| name     |
+----------+
| Normal   |
| Water    |
| Grass    |
| Rock     |
| Fire     |
| Ground   |
| Poison   |
| Bug      |
| Electric |
| Dragon   |
| Steel    |
| Dark     |
| Fighting |
| Psychic  |
| Ghost    |
| Fairy    |
| Ice      |
| Flying   |
+----------+
18 rows in set (0.02 sec)


What is the name of the pokemon with id 45?
SELECT name FROM pokemon.pokemons WHERE id = '45';
+-------+
| name  |
+-------+
| Eevee |
+-------+
1 row in set (0.00 sec)


How many pokemon are there?
SELECT * FROM pokemon.pokemons;
656 rows in set (0.01 sec)


How many types are there?
SELECT * FROM pokemon.types;
18 rows in set (0.02 sec)


How many pokemon have a secondary type?
SELECT secondary_type FROM pokemon.pokemons WHERE secondary_type IS NOT NULL;
316 rows in set (0.00 sec)





PART 3:

What is each pokemon's primary type?
SELECT primary_type FROM pokemon.pokemons;
656 rows in set (0.00 sec)


What is Rufflet's secondary type?
SELECT DISTINCT pokemons.secondary_type, types.name
    -> FROM types, pokemons
    -> WHERE pokemons.name = 'Rufflet'
    -> AND types.id = pokemons.secondary_type;
+----------------+--------+
| secondary_type | name   |
+----------------+--------+
|             18 | Flying |
+----------------+--------+
1 row in set (0.00 sec)



What are the names of the pokemon that belong to the trainer with trainerID 303?
SELECT pokemons.name
    -> FROM pokemons
    -> INNER JOIN pokemon_trainer
    -> ON pokemons.id = pokemon_trainer.pokemon_id
    -> WHERE trainerID = 303;
+-----------+
| name      |
+-----------+
| Wailord   |
| Vileplume |
+-----------+


How many pokemon have a secondary type Poison?
SELECT secondary_type FROM pokemon.pokemons WHERE secondary_type = '7';
31 rows in set (0.00 sec)


What are all the primary types and how many pokemon have that type?
    SELECT DISTINCT pokemons.primary_type , types.name ,
        ->     COUNT(*)
        ->     FROM types, pokemons
        ->     WHERE types.id = pokemons.primary_type
        ->     GROUP BY primary_type;
    +--------------+----------+----------+
    | primary_type | name     | COUNT(*) |
    +--------------+----------+----------+
    |            1 | Normal   |       90 |
    |            2 | Water    |       95 |
    |            3 | Grass    |       59 |
    |            4 | Rock     |       38 |
    |            5 | Fire     |       38 |
    |            6 | Ground   |       29 |
    |            7 | Poison   |       27 |
    |            8 | Bug      |       61 |
    |            9 | Electric |       35 |
    |           10 | Dragon   |       22 |
    |           11 | Steel    |       19 |
    |           12 | Dark     |       24 |
    |           13 | Fighting |       25 |
    |           14 | Psychic  |       38 |
    |           15 | Ghost    |       19 |
    |           16 | Fairy    |       14 |
    |           17 | Ice      |       22 |
    |           18 | Flying   |        1 |
    +--------------+----------+----------+
    18 rows in set (0.01 sec)


How many pokemon at level 100 does each trainer with at least one level 100 pokemon have?
(Hint: your query should not display a trainer)

SELECT trainerid,
COUNT(*) FROM pokemon_trainer
WHERE pokelevel = '100'
GROUP BY trainerid;


How many pokemon only belong to one trainer and no other?
SELECT DISTINCT pokemon_id,
    -> COUNT(*) FROM pokemon_trainer
    -> GROUP BY pokemon_id
    -> HAVING COUNT(*) = 1;
+------------+----------+
| pokemon_id | COUNT(*) |
+------------+----------+
|        592 |        1 |
|        593 |        1 |
|        606 |        1 |
|        644 |        1 |
|        646 |        1 |
|        647 |        1 |
|        649 |        1 |
|        650 |        1 |
|        651 |        1 |
|        652 |        1 |
|        653 |        1 |
|        655 |        1 |
|        656 |        1 |
+------------+----------+
13 rows in set (0.03 sec)




PART 4

SELECT ROUND(AVG(pt.spatk + pt.attack + pt.defense)) AS Attack_Power,
p.name AS Pokemon,
trainername AS Trainer_Name,
pokelevel AS Level,
typeP.name AS Primary_Type,
IFNULL(typeS.name, ' ') AS Secondary_Type
FROM pokemon_trainer AS pt
JOIN pokemons AS p ON pt.pokemon_id = p.id
JOIN trainers AS t ON t.trainerID = pt.trainerID
JOIN types AS typeP ON p.primary_type = typeP.id
LEFT JOIN types AS typeS ON p.secondary_type = typeS.id
GROUP BY p.name, t.trainername, pokelevel, typeP.name, typeS.name
ORDER BY Attack_Power DESC;


I decided to sort my data by the pokemon's special attack, attack and defense to get the strongest pokemon.
The better the pokemon attack and defense is, the more it can fight the competition.